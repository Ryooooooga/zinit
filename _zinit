#compdef _zinit zinit

# ZSH completion for Vagrant
#
# To use this completion add this to ~/.zshrc
# fpath=(/path/to/this/dir $fpath)
# compinit
#
# For development reload the function after making changes
# unfunction _vagrant && autoload -U _vagrant 

# zinit_plugins() {
# 	_wanted plugins expl 'plugins' compadd $plugins
# }
__plugin_and_snippet_list() {
  local -a loaded_snippet snippets unloaded_snippet
  typeset -a all_plugin
  local snip

  all_plugin=( "${ZINIT[PLUGINS_DIR]}"/*(N:t) )
  all_plugin=( "${plugins[@]//---//}" )
  all_plugin=( "${plugins[@]:#_local/zinit}" )
  all_plugin=( "${plugins[@]:#custom}" )

  # snippets=( "${ZINIT[SNIPPETS_DIR]}"/**/._zinit(D/:h) )
  # snippets=( ${snippets[@]#${ZINIT[SNIPPETS_DIR]}/} )
  # snippets=( ${snippets[@]/(#b)(http|https|ftp|ftps|scp)--/${match[1]}://} )
  # snippets=( ${snippets[@]/--//} )

  # for snip ( ${snippets[@]} ) {
  #   if [[ -n ${ZINIT_SNIPPETS[$snip]} ]]; then
  #     loaded_snippet+=( $snip )
  #     unloaded_snippet=( ${snippets[@]:#$snip} )
  #   fi
  # }

  _wanted version expl 'version' compadd $all_plugin
   #   "unloaded_snippet:unloaded snippet:($unloaded_snippet)" \
   #   "loaded_snippet:loaded snippet:($loaded_snippet)" \
   # _alternative \
   #   "unloaded_snippet:unloaded snippet:($unloaded_snippet)" \
   #   "loaded_snippet:loaded snippet:($loaded_snippet)" \
   #   "all_plugin:installed plugin:($all_plugin)"
  # _wanted plugins expl 'plugins' compadd $all_plugin
}
# 	# _wanted version expl 'version' compadd $snippets_alreadyld

# }
__box_list ()
{
  _wanted plugins expl 'plugins' compadd $plugins
}


__plugin_list ()
{
    _wanted application expl 'command' compadd $(command vagrant plugin list | awk '{print $1}')
}


function _zinit () {

  local -a sub_commands && sub_commands=(
    'bindkeys:lists bindkeys set up by each plugin.'
    'cache:list or clean every cached package.'
    'cclear:clear stray and improper completions.'
    'cd:go into plugins directory.'
    'cdclear:clear compdef replay list.'
    'cdisable:disable completion.'
    'cdlist:show compdef replay list.'
    'cdreplay:replay compdefs (to be done after compinit).'
    'cenable:enable completion.'
    'changes:view plugins git log.'
    'clist:list completions in use.'
    'compile:compile a plugin.'
    'compiled:show which plugins are compiled.'
    'compinit:refresh installed completions.'
    'completions:list completions in use.'
    'config:manages the zinit configuration files.'
    'create:creates new plugin.'
    'creinstall:install completions for plugin.'
    'csearch:search for available completions from any plugin.'
    'cuninstall:uninstall completions for plugin.'
    'dclear:clear report of what was going on in session.'
    'delete:clean and remove a plugin or snippet.'
    'doctor:show information about the installed tooling..'
    'dreport:report what was going on in session.'
    'dstart:start tracking whats going on in session.'
    'dstop:stop tracking whats going on in session.'
    'dtrace:start tracking whats going on in session.'
    'dunload:revert changes recorded between dstart and dstop.'
    'edit:edit a plugin.'
    'env-whitelist:specify names (also patterns) of parameters to be left unchanged during an unload.'
    'glance:look at plugins source (pygmentize, {,source-}highlight).'
    'help:usage information.'
    'info:show information about a package.'
    'install:install all the dependencies listed within package.json.'
    'list:show what plugins are loaded.'
    'load:load plugin.'
    'loaded:show what plugins are loaded.'
    'ls:list installed snippets.'
    'man:open zinit man page.'
    'module:manage binary zsh module shipped with zinit.'
    'recall:fetch saved ice modifier.'
    'recently:show plugins that changed recently.'
    'reload:restart the zsh process.'
    'report:show plugin report.'
    'run:execute a command in a plugin folder.'
    'self-update:updates zinit.'
    'snippet:source local or remote file.'
    'srv:manage a service.'
    'status:git status for plugin (or all plugins if --all passed).'
    'stress:test plugin for compatibility with set of options.'
    'times:statistics on plugin loading times.'
    'uncompile:remove compiled plugins.'
    'uncompile:remove compiled version of plugin (or of all plugins if --all passed).'
    'unload:unload plugin.'
    'update:update plugins.'
    'versions:display version information of zinit and related tools.'
    'zstatus:zinit status.'
  )
    local -a bindkeys_arguments && bindkeys_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a cache_arguments && cache_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a cclear_arguments && cclear_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a cd_arguments && cd_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a cdclear_arguments && cdclear_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a cdisable_arguments && cdisable_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a cdlist_arguments && cdlist_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a cdreplay_arguments && cdreplay_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a cenable_arguments && cenable_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a changes_arguments && changes_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a clist_arguments && clist_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a compile_arguments && compile_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a compiled_arguments && compiled_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a compinit_arguments && compinit_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a completions_arguments && completions_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a config_arguments && config_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a create_arguments && create_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a creinstall_arguments && creinstall_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a csearch_arguments && csearch_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    local -a cuninstall_arguments && cuninstall_arguments=(
    '--(no-)parallel=[Enable or disable parallelism if provider supports it (automatically enables force)]'
    )
    # local -a dclear_arguments && dclear_arguments=(

    # )
    # local -a delete_arguments && delete_arguments=(

    # )
    # local -a doctor_arguments && doctor_arguments=(

    # )
    # local -a dreport_arguments && dreport_arguments=(

    # )
    # local -a dstart_arguments && dstart_arguments=(

    # )
    # local -a dstop_arguments && dstop_arguments=(

    # )
    # local -a dtrace_arguments && dtrace_arguments=(

    # )
    # local -a dunload_arguments && dunload_arguments=(

    # )
    # local -a edit_arguments && edit_arguments=(

    # )
    # local -a glance_arguments && glance_arguments=(

    # )
    # local -a help_arguments && help_arguments=(

    # )
    # local -a info_arguments && info_arguments=(

    # )
    # local -a install_arguments && install_arguments=(

    # )
    # local -a list_arguments && list_arguments=(

    # )
    # local -a load_arguments && load_arguments=(

    # )
    # local -a loaded_arguments && loaded_arguments=(

    # )
    # local -a ls_arguments && ls_arguments=(

    # )
    # local -a man_arguments && man_arguments=(

    # )
    # local -a module_arguments && module_arguments=(

    # )
    # local -a recall_arguments && recall_arguments=(

    # )
    # local -a recently_arguments && recently_arguments=(

    # )
    # local -a reload_arguments && reload_arguments=(

    # )
    # local -a report_arguments && report_arguments=(

    # )
    # local -a run_arguments && run_arguments=(

    # )
    # local -a self-update_arguments && self-update_arguments=(

    # )
    # local -a snippet_arguments && snippet_arguments=(

    # )
    # local -a srv_arguments && srv_arguments=(

    # )
    # local -a status_arguments && status_arguments=(

    # )
    # local -a stress_arguments && stress_arguments=(

    # )
    local -a times_arguments && times_arguments=(
      {-s,--seconds}'[Display time in seconds.]'
      {-m,--moments}'[Display ada]'
      {-a,--all}'[asdasd]'
    )
    # local -a uncompile_arguments && uncompile_arguments=(

    # )
    # local -a uncompile_arguments && uncompile_arguments=(

    # )
    # local -a unload_arguments && unload_arguments=(

    # )
    local -a update_arguments && update_arguments=(
      {-a,--all}'[asdasd]'
    )
    # local -a versions_arguments && versions_arguments=(

    # )
    # local -a zstatus_arguments && zstatus_arguments=(

    # )

  _arguments -C ':command:->command' '*::options:->options'

  case $state in
    (command)
      _describe -t commands 'command' sub_commands
      return
    ;;

    (options)
      case $line[1] in
        module)
          __zinit-module ;;
        times)
          _arguments -s -S : $times_arguments ;;
        update)
          _arguments -s -S : $update_arguments ':plugin and snippet:__plugin_and_snippet_list' ;;
      esac
    ;;
  esac

}

__zinit-module () {
  local -a sub_commands && sub_commands=(
    'build:build'
    'info:info'
    'help:help'
  )
  local -a build_arguments && build_arguments=(
    '--clean=[Enable non_interactive output]'
  )
  local -a info_arguments && info_arguments=(
    '--link=[Enable debug output with timestamps]'
  )
  _arguments -C ':command:->command' '*::options:->options'
    case $state in
      (command)
        _describe -t commands 'command' sub_commands
        return
      ;;
      (options)
        case $line[1] in
          build)
            _arguments -s -S : $build_arguments  ;;
          info)
            _arguments -s -S : $info_arguments  ;;
        esac
        ;;
    esac
}
